{"ast":null,"code":"import { createSelector } from 'reselect'; //input selector to create small slice of state object\n\nconst selectCart = state => state.cart; //requires two arguments\n\n\nexport const selectCartItems = createSelector( //first argument is an array/collection of selectors\n//can also be a series of comma separated arguments ex. arg1, arg2\n//can be any type of selector, either the input selector above, or an output selector like this one\n[selectCart], //second argument is a function that returns the value we want from selector\n//can take multiple selectors\n//must order the arguments in the same order as they are in the array above\ncart => cart.cartItems);\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => {\n  cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0);\n});\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity * cartItem.price, 0));","map":{"version":3,"sources":["/home/wihas/Documents/Projects/udemyReact/crwn-clothing/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,EAC3C;AACA;AACA;AACA,CAACC,UAAD,CAJ2C,EAK3C;AACA;AACA;AACCE,IAAD,IAAUA,IAAI,CAACE,SAR4B,CAAtC;AAWP,OAAO,MAAMC,gBAAgB,GAAGN,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE5CE,IAAI,IAAIA,IAAI,CAACI,MAF+B,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,CAChD,CAACI,eAAD,CADgD,EAEhDC,SAAS,IAAI;AAEXA,EAAAA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAFnC,EAGE,CAHF;AAKD,CAT+C,CAA3C;AAYP,OAAO,MAAMC,eAAe,GAAGb,cAAc,CAC3C,CAACI,eAAD,CAD2C,EAE3CC,SAAS,IACPA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACG,KAFvD,EAGA,CAHA,CAHyC,CAAtC","sourcesContent":["import { createSelector } from 'reselect';\n\n//input selector to create small slice of state object\nconst selectCart = state => state.cart;\n\n//requires two arguments\nexport const selectCartItems = createSelector(\n  //first argument is an array/collection of selectors\n  //can also be a series of comma separated arguments ex. arg1, arg2\n  //can be any type of selector, either the input selector above, or an output selector like this one\n  [selectCart],\n  //second argument is a function that returns the value we want from selector\n  //can take multiple selectors\n  //must order the arguments in the same order as they are in the array above\n  (cart) => cart.cartItems\n);\n\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  cart => cart.hidden\n);\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  cartItems => {\n\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    );\n  }\n);\n\nexport const selectCartTotal = createSelector(\n  [selectCartItems], \n  cartItems =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) => \n        accumulatedQuantity + cartItem.quantity * cartItem.price,\n    0\n  )\n);"]},"metadata":{},"sourceType":"module"}